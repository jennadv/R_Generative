geom_waffle()
#try a waffle or something for # of missions
us_top %>%
ggplot(aes(fill = missions, values = avg_hrs)) +
geom_waffle()
#try a waffle or something for # of missions
us_top %>%
ggplot(aes(fill = missions, values = n)) +
geom_waffle()
#try a waffle or something for # of missions
us_top %>%
ggplot(aes(size = sex, fill = missions)) +
geom_waffle()
#try a waffle or something for # of missions
us_top %>%
ggplot(aes(fill = sex, value = missions)) +
geom_waffle()
#try a waffle or something for # of missions
us_top %>%
ggplot(aes(fill = sex, values = missions)) +
geom_waffle()
#try a waffle or something for # of missions
us_top %>%
ggplot(aes(fill = sex, values = n)) +
geom_waffle()
#try a waffle or something for # of missions
us_top %>%
ggplot(aes(fill = sex, values = missions)) +
geom_waffle()
#try a waffle or something for # of missions
us_top %>%
ggplot(aes(fill = sex, size = missions)) +
geom_waffle()
#try a waffle or something for # of missions
us_top %>%
ggplot(aes(fill = sex, value = missions)) +
geom_waffle()
#try a waffle or something for # of missions
us_top %>%
ggplot(aes(fill = sex, values = missions)) +
geom_waffle()
library(tidyverse)
bird_collisions <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-04-30/bird_collisions.csv")
mp_light <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-04-30/mp_light.csv")
plot <- bird_collisions %>%
left_join(mp_light, by = "date") %>%
filter(!is.na(light_score),
flight_call != "Rare") %>%
group_by(flight_call, light_score) %>%
tally()
plot %>%
ggplot(aes(light_score, n, fill = flight_call)) +
geom_bar(stat = "identity", position = "fill") +
coord_flip() +
theme_jdv()
# Theme JDV ---------------------------------------------------------------
theme_jdv <- function(base_size = 11,
base_family = "Arial Narrow") {
theme_minimal(base_size = base_size,
base_family = base_family) %+replace%
theme(axis.title = element_text(face = 'bold'),
axis.title.x = element_text(vjust = -2),
axis.title.y = element_text(vjust = 4,
angle = 90),
legend.title = element_text(face = 'bold'),
legend.text = element_text(margin = margin(t = 7)),
legend.spacing.x = unit(1.0, 'cm'),
legend.key.height = unit(5, "pt"),
legend.key.width = unit(5, "pt"),
legend.box.margin = margin(t = .6, r = 2, unit = "cm"),
panel.grid.major = element_line(linetype = 'solid',
size = .2),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size = 21,
face = 'bold',
hjust = 0,
vjust = 3),
plot.subtitle = element_text(hjust = 0,
vjust = 2),
plot.margin = unit(c(.8, 1, .5, .8), "cm"),
strip.text.x = element_text(face = "bold",
size = 12),
complete = FALSE,
validate = TRUE)
}
plot %>%
ggplot(aes(light_score, n, fill = flight_call)) +
geom_bar(stat = "identity", position = "fill") +
coord_flip() +
theme_jdv()
# Theme JDV ---------------------------------------------------------------
theme_jdv <- function(base_size = 11,
base_family = "Arial Narrow") {
theme_minimal(base_size = base_size,
base_family = base_family) %+replace%
theme(axis.title = element_text(face = 'bold'),
axis.title.x = element_text(vjust = -2),
axis.title.y = element_text(vjust = 4,
angle = 90),
legend.title = element_text(face = 'bold'),
legend.text = element_text(margin = margin(t = 7)),
legend.spacing.x = unit(1.0, 'cm'),
legend.key.height = unit(5, "pt"),
legend.key.width = unit(5, "pt"),
legend.box.margin = margin(t = .6, r = 2, unit = "cm"),
panel.grid.major = element_line(linetype = 'solid',
size = .2),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size = 21,
face = 'bold',
hjust = 0,
vjust = 3),
plot.subtitle = element_text(hjust = 0,
vjust = 2),
plot.margin = unit(c(.8, 1, .5, .8), "cm"),
strip.text.x = element_text(face = "bold",
size = 12),
complete = FALSE,
validate = TRUE)
}
install.packages("ggthemes")
library(tidyverse)
library(ggthemes)
board_games <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-12/board_games.csv")
glimpse(board_games)
#2 player games with at least 100 ratings
twoplayer <- board_games %>%
filter(min_players == 2 & max_players == 2 & users_rated > 100)
#create rating bins
twoplayer <- twoplayer %>%
mutate(rating_bins =  ifelse(average_rating < 6.0, "< 6.0",
ifelse(average_rating < 6.5, "6.0 - 6.5",
ifelse(average_rating < 7.0, "6.5 - 7.0",
ifelse(average_rating < 7.5, "7.0 - 7.5",
ifelse(average_rating >= 7.5, "7.5 and Above", "NA"))))))
#long playtimes?
twoplayer %>%
filter(playing_time > 1000) %>%
select(name, playing_time) %>%
arrange(desc(playing_time))
#plot play time based on rating bins
twoplayer %>%
ggplot(aes(rating_bins, playing_time, fill = rating_bins)) +
geom_violin() +
ylim(0, 600) +
ggtitle("2 Player Board Games Play Time by Average User Rating") +
ylab("Play Time") +
xlab("Average Rating") +
theme_minimal(base_family = "Helvetica") +
theme(legend.position = "none",
axis.text = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"))
highestratedtwoplayer <- twoplayer %>%
filter(rating_bins == "7.5 - 8.5", users_rated > 499) %>%
select(name, year_published, average_rating, users_rated, description, category, playing_time) %>%
arrange(desc(average_rating))
View(highestratedtwoplayer)
djlist <- highestratedtwoplayer %>%
filter(name %in% c("7 Wonders Duel", "Hive Pocket", "YINSH")) %>%
select(name, category, description)
View(djlist)
highestratedtwoplayer <- twoplayer %>%
filter(rating_bins == "7.5 - 8.5", users_rated > 499) %>%
select(name, year_published, average_rating, users_rated, description, category, playing_time) %>%
arrange(desc(average_rating))
#average play times by year
avgplaytime <- board_games %>%
select(playing_time, year_published, name) %>%
filter(playing_time <= 1000 & year_published >= "2001") %>%
group_by(year_published) %>%
summarize(avgplaying_time = mean(playing_time), num_games = n())
avgplaytime %>%
ggplot(aes(year_published, avgplaying_time)) +
ylim(0, 90) +
geom_area() +
transition_reveal(year_published)
library(ggthemes)
avgplaytime %>%
ggplot(aes(year_published, avgplaying_time)) +
ylim(0, 90) +
geom_area()
View(avgplaytime)
#plot play time based on rating bins
twoplayer %>%
ggplot(aes(rating_bins, playing_time, fill = rating_bins)) +
geom_violin() +
ylim(0, 600) +
ggtitle("2 Player Board Games Play Time by Average User Rating") +
ylab("Play Time") +
xlab("Average Rating") +
theme_minimal(base_family = "Helvetica") +
theme(legend.position = "none",
axis.text = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"))
#plot play time based on rating bins
twoplayer %>%
ggplot(aes(rating_bins, playing_time, fill = rating_bins)) +
geom_violin() +
ylim(0, 600) +
ggtitle("2 Player Board Games Play Time by Average User Rating") +
ylab("Play Time") +
xlab("Average Rating") +
theme_jdv(base_family = "Helvetica") +
theme(legend.position = "none",
axis.text = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"))
#plot play time based on rating bins
twoplayer %>%
ggplot(aes(rating_bins, playing_time, fill = rating_bins)) +
geom_violin() +
ylim(0, 600) +
ggtitle("2 Player Board Games Play Time by Average User Rating") +
ylab("Play Time") +
xlab("Average Rating") +
theme_jdv() +
theme(legend.position = "none",
axis.text = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"))
library(tidyverse)
library(lubridate)
phd_field <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-02-19/phd_by_field.csv")
glimpse(phd_field)
#look at broad fields over the years
broad_fields <- phd_field %>%
group_by(broad_field, year) %>%
summarize(total_phds = sum(n_phds, na.rm = TRUE))
broad_fields %>%
filter(broad_field != "Other") %>%
ggplot(aes(year, total_phds, fill = broad_field, color = broad_field)) +
geom_col(alpha = .5) +
facet_wrap(broad_field ~ ., nrow = 3) +
theme_jdv() +
theme(legend.position = "None") +
scale_x_continuous(breaks = seq(2008, 2017, by = 3)) +
scale_y_continuous(breaks = seq(0, 25000, by = 5000)) +
xlab("Year (2008 - 2017)") +
ylab("Total PhDs Awarded") +
labs(title = "PhD's Awarded by Year",
caption = "ncses.nsf.gov\n@jennaldevries")
theme_jdv_dark <- function(base_size = 11,
base_family = "Arial Narrow") {
theme_minimal(base_size = base_size,
base_family = base_family) %+replace%
theme(axis.title = element_text(face = 'bold',
color = "light grey"),
axis.title.x = element_text(vjust = -2,
color = "light grey"),
axis.title.y = element_text(vjust = 4,
angle = 90,
color = "light grey"),
axis.text = element_text(color = "light grey"),
legend.title = element_text(face = 'bold',
color = "#FFFFFF"),
legend.text = element_text(color = "#FFFFFF",
size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#1c1c1c"),  #Was grey20
plot.title = element_text(size = 19,
face = 'bold',
hjust = 0,
vjust = 3,
color = "light grey"),
plot.subtitle = element_text(hjust = 0,
vjust = 2,
color = "light grey"),
plot.caption = element_text(hjust = 1, vjust = 0, size = 8,
color = "light grey"),
plot.margin = unit(c(.8, .5, .5, 1), "cm"),
strip.text = element_text(color = "#FFFFFF",
face = "bold",
size = 11),
strip.background = element_rect(size = 8),
complete = FALSE,
validate = TRUE)
}
broad_fields <- phd_field %>%
group_by(broad_field, year) %>%
summarize(total_phds = sum(n_phds, na.rm = TRUE))
broad_fields %>%
filter(broad_field != "Other") %>%
ggplot(aes(year, total_phds, fill = broad_field, color = broad_field)) +
geom_col(alpha = .5) +
facet_wrap(broad_field ~ ., nrow = 3) +
theme_jdv_dark() +
theme(legend.position = "None") +
scale_x_continuous(breaks = seq(2008, 2017, by = 3)) +
scale_y_continuous(breaks = seq(0, 25000, by = 5000)) +
xlab("Year (2008 - 2017)") +
ylab("Total PhDs Awarded") +
labs(title = "PhD's Awarded by Year",
caption = "ncses.nsf.gov\n@jennaldevries")
library(tidyverse)
wine_ratings <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-28/winemag-data-130k-v2.csv")
countries <- wine_ratings %>%
group_by(country) %>%
tally() %>%
arrange(desc(n))
pricebycountry <- wine_ratings %>%
group_by(country) %>%
summarise(price = mean(price)) %>%
arrange(desc(price))
pointsbycountry <- wine_ratings %>%
group_by(country) %>%
summarise(price = mean(points)) %>%
arrange(desc(price))
#points 80 to 100
wineplot <- wine_ratings %>%
ddply()
summary(factor(wine_ratings$country))
library(Rcpp)
library(tidyverse)
cppFunction('DataFrame createTrajectory(int n, double x0, double y0,
double a, double b, double c, double d) {
// create the columns
NumericVector x(n);
NumericVector y(n);
x[0]=x0;
y[0]=y0;
for(int i = 1; i < n; ++i) {
x[i] = sin(a*y[i-1]) + c*cos(a*x[i-1]);
y[i] = sin(b*x[i-1]) + d*cos(b*y[i-1]);
}
// return a new data frame
return DataFrame::create(_["x"]= x, _["y"]= y);
}
')
a = -1.7
b = 1.3
c = -0.1
d = -1.21
#Create the data frame that will be plotted with ggplot
# Number of points, x and y points start at .1, a and b set above
#createTrajectory(n, x0, y0, a, b)
dat = createTrajectory(4000000, .1, .1, a, b, c, d)
ggplot(dat, aes(x, y)) +
geom_point(shape=46, alpha=.01) +
theme(legend.position  = "none",
panel.background = element_rect(fill="#f3f3e6"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
View(dat)
ggsave("clifford2.png", device = "png")
View(dat)
View(dat)
getwd()
setwd("/Users/jennadevries/Desktop/R Projects/Generative/Attractors")
a = -1.7
b = 1.3
c = -0.1
d = -1.21
#Create the data frame that will be plotted with ggplot
# Number of points, x and y points start at .1, a and b set above
#createTrajectory(n, x0, y0, a, b)
dat = createTrajectory(4000000, .1, .1, a, b, c, d)
#find previous clipping code if interested in cropping the image
#plot
ggplot(dat, aes(x, y)) +
geom_point(shape=46, alpha=.01) +
theme(legend.position  = "none",
panel.background = element_rect(fill="#f3f3e6"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
ggsave("clifford2.png", device = "png",
width = 10,
height = 10,
units = c("in"),)
cppFunction('DataFrame createTrajectory(int n, double x0, double y0,
double a, double b) {
// create the columns
NumericVector x(n);
NumericVector y(n);
x[0]=x0;
y[0]=y0;
for(int i = 1; i < n; ++i) {
x[i] = sin(x[i-1]*y[i-1]/b)*y[i-1]+cos(a*x[i-1]-y[i-1]);
y[i] = x[i-1]+sin(y[i-1])/b;
}
// return a new data frame
return DataFrame::create(_["x"]= x, _["y"]= y);
}
')
#Variables a and b are floating point values between -1 and +1
#Bedhead 1, 2
a = .09
b = .83
#Create the data frame that will be plotted with ggplot
# Number of points, x and y points start at 1, a and b set above
#createTrajectory(n, x0, y0, a, b)
dat = createTrajectory(4000000, 1, 1, a, b)
#clip outer points
#Sometimes you need to crop the image to make a really compelling picture.
#By “zooming in” you can see patterns in what might have looked like a rather
#squished or failed attractor. You can “zoom” in R by doing something like this.
xmax <- max(dat$x)/2.5
xmin <- min(dat$x)/2.5
ymax <- max(dat$y)/2.5
ymin <- min(dat$y)/2.5
dat_clip <- dat %>%
filter(x > xmin & x < xmax) %>%
filter(y > ymin & y < ymax)
#plot
ggplot(dat_clip, aes(x, y)) +
geom_point(shape=46, alpha=.01) +
theme(legend.position  = "none",
panel.background = element_rect(fill="#FBFBF7"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
ggsave("clifford2.png", device = "png",
width = 10,
height = 10,
units = c("in"),)
cppFunction('DataFrame createTrajectory(int n, double x0, double y0,
double a, double b) {
// create the columns
NumericVector x(n);
NumericVector y(n);
x[0]=x0;
y[0]=y0;
for(int i = 1; i < n; ++i) {
x[i] = sin(x[i-1]*y[i-1]/b)*y[i-1]+cos(a*x[i-1]-y[i-1]);
y[i] = x[i-1]+sin(y[i-1])/b;
}
// return a new data frame
return DataFrame::create(_["x"]= x, _["y"]= y);
}
')
#Variables a and b are floating point values between -1 and +1
#Bedhead 1, 2
a = .09
b = .83
#Create the data frame that will be plotted with ggplot
# Number of points, x and y points start at 1, a and b set above
#createTrajectory(n, x0, y0, a, b)
dat = createTrajectory(4000000, 1, 1, a, b)
#clip outer points
#Sometimes you need to crop the image to make a really compelling picture.
#By “zooming in” you can see patterns in what might have looked like a rather
#squished or failed attractor. You can “zoom” in R by doing something like this.
xmax <- max(dat$x)/2.5
xmin <- min(dat$x)/2.5
ymax <- max(dat$y)/2.5
ymin <- min(dat$y)/2.5
dat_clip <- dat %>%
filter(x > xmin & x < xmax) %>%
filter(y > ymin & y < ymax)
#plot
ggplot(dat_clip, aes(x, y)) +
geom_point(shape=46, alpha=.01) +
theme(legend.position  = "none",
panel.background = element_rect(fill="#f3f3e6"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
ggsave("bedhead3.png", device = "png",
width = 10,
height = 10,
units = c("in"),)
cppFunction('DataFrame createTrajectory(int n, double x0, double y0,
double a, double b, double c, double d) {
// create the columns
NumericVector x(n);
NumericVector y(n);
x[0]=x0;
y[0]=y0;
for(int i = 1; i < n; ++i) {
x[i] = sin(a*y[i-1]) + c*cos(a*x[i-1]);
y[i] = sin(b*x[i-1]) + d*cos(b*y[i-1]);
}
// return a new data frame
return DataFrame::create(_["x"]= x, _["y"]= y);
}
')
#Variables a and b are floating point values between -3 and +3
#Clifford 1 - two circles
# a = -1.7
# b = 1.8
# c = -1.9
# d = -0.4
#Clifford 2 - cleaner, more clear lines
a = -1.7
b = 1.3
c = -0.1
d = -1.21
#Create the data frame that will be plotted with ggplot
# Number of points, x and y points start at .1, a and b set above
#createTrajectory(n, x0, y0, a, b)
dat = createTrajectory(4000000, .1, .1, a, b, c, d)
#find previous clipping code if interested in cropping the image
#plot
ggplot(dat, aes(x, y)) +
geom_point(shape=46, alpha=.01) +
theme(legend.position  = "none",
panel.background = element_rect(fill="#f3f3e6"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
ggsave("clifford2.png", device = "png",
width = 10,
height = 10,
units = c("in"),)
View(dat)
